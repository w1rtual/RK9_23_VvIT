#include <iostream>
#include <cmath>
#define M_PI 3.1415926535897932384626433832795

class figure
{
private:	//возможно, protected, но нам сейчас это не нужно
	double x, y;
	double angle;
public:
	figure(const double X, const double Y, const double Angle)
	{
		x = X;
		y = Y;
		angle = Angle;
	}
	void replace(const double newX, const double newY, const double newAngle)
	{
		x = newX;
		y = newY;
		angle = newAngle;
	}
	void move(const double dx, const double dy)
	{
		x += dx;
		y += dy;
	}
	void rotate(const double dAngle)
	{
		angle += dAngle;
	}
	virtual double getPerimeter() const = 0;
	virtual double getArea() const = 0;
	virtual ~figure() {}
};

class rectangle : public figure	//is-a
{
private:
	double a, b;
public:
	rectangle(const double side_a,
		const double side_b,
		const double center_x,
		const double center_y,
		const double rotation_angle = 0)
		: figure(center_x, center_y, rotation_angle), a(side_a), b(side_b) {}
	virtual double getPerimeter() const
	{
		return 2 * (a + b);
	}
	virtual double getArea() const
	{
		return a * b;
	}
	virtual ~rectangle() {}
};

class ellipse : public figure //is-a
{
private:
	double a, b;
public:
	ellipse(const double semiaxis_a,
		const double semiaxis_b,
		const double center_x,
		const double center_y,
		const double rotation_angle = 0)
		: figure(center_x, center_y, rotation_angle), a(semiaxis_a), b(semiaxis_b) {}
	virtual double getPerimeter() const
	{
		return 4 * (M_PI * a * b + (a - b) * (a - b)) / (a + b);
	}
	virtual double getArea() const
	{
		return M_PI * a * b;
	}
	virtual ~ellipse() {}
};

class triangle : public figure //is-a
{
protected:	//чтобы увидел дочерний класс
	double a, b, c;
public:
	triangle(const double side_a,
		const double side_b,
		const double side_c,
		const double start_vertex_x,
		const double start_vertex_y,
		const double rotation_angle = 0)
		: figure(start_vertex_x, start_vertex_y, rotation_angle),
		a(side_a), b(side_b), c(side_c) {}
	virtual double getPerimeter() const
	{
		return a + b + c;
	}
	virtual double getArea() const
	{
		double p = getPerimeter() / 2.;
		return sqrt(p * (p - a) * (p - b) * (p - c));
	}
	virtual ~triangle() {}
};

class square : public figure
{
private:
	rectangle rect;		//has-a:	объект-член класса
public:
	square(const double side,
		const double center_x,
		const double center_y,
		const double rotation_angle = 0)
		: figure(center_x, center_y, rotation_angle),		//избыточно, поскольку реализовано в rectangle
		rect(side, side, 0, 0) {}
	virtual double getPerimeter() const
	{
		return rect.getPerimeter();
	}
	virtual double getArea() const
	{
		return rect.getArea();
	}
	virtual ~square() {}
};

class circle : private figure	//has-a:	закрытое наследование от базового класса
{
private:
	double r;
public:
	circle(const double radius,
		const double center_x,
		const double center_y,
		const double rotation_angle = 0)
		: figure(center_x, center_y, rotation_angle), r(radius) {}
	virtual double getPerimeter() const
	{
		return 2 * M_PI * r;
	}
	virtual double getArea() const
	{
		return M_PI * r * r;
	}
	using figure::replace;
	using figure::move;
	using figure::rotate;
	virtual ~circle() {}
};

class rectTriangle : private triangle //has-a:	закрытое наследование от производного класса
{
public:
	rectTriangle(const double side_a,
		const double side_b,
		const double start_vertex_x,
		const double start_vertex_y,
		const double rotation_angle = 0)
		: triangle(side_a, side_b, sqrt(side_a* side_a + side_b * side_b), start_vertex_x, start_vertex_y, rotation_angle) {}

	virtual double getArea() const
	{
		return a * b / 2.;
	}
	using figure::replace;
	using figure::move;
	using figure::rotate;
	using triangle::getPerimeter;
	virtual ~rectTriangle() {}
};


int main()
{
	rectangle test_rectangle(1, 2, 0, 0, 0);
	ellipse test_ellipse(2, 3, 0, 0, 0);
	triangle test_triangle(3, 4, 5, 0, 0, 0);
	square test_square(3, 0, 0, 0);
	circle test_circle(4, 0, 0, 0);
	rectTriangle test_rectTriangle(3, 4, 0, 0, 0);


	figure* pFigure;

	pFigure = &test_rectangle;
	std::cout << "rectangle:\t\t" << pFigure->getArea() << std::endl;

	pFigure = &test_ellipse;
	std::cout << "ellipse:\t\t" << pFigure->getArea() << std::endl;

	pFigure = &test_triangle;
	std::cout << "triangle:\t\t" << pFigure->getArea() << std::endl;

	pFigure = &test_square;
	std::cout << "square:\t\t\t" << pFigure->getArea() << std::endl;

	//при закрытом наследовании требуется явное приведение типов!
	pFigure = (figure*)&test_circle;
	std::cout << "circle:\t\t\t" << pFigure->getArea() << std::endl;
	//тестируем методы, унаследованные с помощью using
	pFigure->move(1, 1);

	//при закрытом наследовании требуется явное приведение типов!
	pFigure = (figure*)&test_rectTriangle;
	std::cout << "rectangular triangle:\t" << pFigure->getArea() << std::endl;
	//тестируем методы, унаследованные с помощью using
	pFigure->move(1, 1);

	std::cin.get();
	return 0;
}
